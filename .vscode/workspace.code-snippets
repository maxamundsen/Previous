{
	// Place your cdrateline.com_2.0 workspace snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and 
	// description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope 
	// is left empty or omitted, the snippet gets applied to all languages. The prefix is what is 
	// used to trigger the snippet and the body will be expanded and inserted. Possible variables are: 
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. 
	// Placeholders with the same ids are connected.
	// Example:
	// "Print to console": {
	// 	"scope": "javascript,typescript",
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }
	"Handler": {
		"scope": "go",
		"prefix": "handler",
		"body": [
			"func $1(w http.ResponseWriter, r *http.Request) {",
			"    identity := sessionStore.GetIdentityFromCtx(r)",
			"",
			"    viewData := make(map[string]interface{})",
			"",
			"    req := make(map[string]string)",
			"    req[\"developer\"] = \"true\"",
			"",
			"    if !auth.EnsureHasClaims(identity, req) {",
			"        viewData[\"error_msg\"] = auth.UnauthorizedMessage",
			"        model := views.NewViewModel(nil, viewData)",
			"        views.RenderWebpage(w, \"error\", model)",
			"        return",
			"    }",
			"",
			"    viewData[\"title\"] = \"$2\"",
			"",
			"    model := views.NewViewModel(identity, viewData)",
			"    views.RenderWebpage(w, \"$4\", model)",
			"}"
		],
		"description": "Handler function"
	},
	"Route" : {
		"scope": "go",
		"prefix": "route",
		"body": [
			"mux.HandleFunc(\"$1\", sessionStore.LoadSession($2, true))"
		],
		"description": "Dynamic route with session middleware"
	}
}