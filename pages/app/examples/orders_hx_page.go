package examples

import (
	"previous/.jet/model"
	"previous/.jet/table"

	. "previous/components"

	"github.com/go-jet/jet/v2/sqlite"

	. "maragu.dev/gomponents"
	. "maragu.dev/gomponents/html"

	"previous/repository"

	"net/http"
)

// @Identity
// @Protected
// @CookieSession
func OrdersHxPage(w http.ResponseWriter, r *http.Request) {
	filter := repository.ParseFilterFromRequest(r)
	url := r.URL.Path

	if filter.Pagination.MaxItemsPerPage == 0 {
		filter.Pagination.MaxItemsPerPage = 5
	}

	// fetch entities from filter function
	// this first counts the possible items before pagination
	searchItems, _ := repository.OrderRepository{}.Filter(repository.Filter{Search: filter.Search, Between: filter.Between})
	filter.Pagination.TotalItems = len(searchItems)

	// this query gets the data AFTER pagination
	orders, _ := repository.OrderRepository{}.Filter(filter)
	filter.Pagination.ItemsThisPage = len(orders)

	// generate page numbers according to total length of data
	filter.Pagination.GeneratePagination()

	// You can automatically generate friendly names from the SQL columns:
	cols := repository.GetColInfoFromJet(
		sqlite.ColumnList{
			table.Order.ID,
			table.Order.ProductID,
			table.Order.PurchaserName,
			table.Order.PurchaserEmail,
			table.Order.Price,
		},
	)

	// You can even grab EVERY column
	// Keep in mind the ordering of the columns is determined by the struct ordering (which is generated by jet at comptime)
	cols = repository.GetColInfoFromJet(table.Order.AllColumns)

	// Or you can map them manually:
	cols = []repository.ColInfo{
		{DbName: table.Order.ID.Name(), DisplayName: "ID"},
		{DbName: table.Order.ProductID.Name(), DisplayName: "Product ID"},
		{DbName: table.Order.PurchaserName.Name(), DisplayName: "Customer", Sortable: true},
		{DbName: table.Order.PurchaserEmail.Name(), DisplayName: "Customer Email", Sortable: true},
		{DbName: table.Order.Price.Name(), DisplayName: "Price (USD)", Sortable: true},
	}

	// Generate HTML
	func() Node {
		elId := "order_table"
		return AutoTable(
			elId,
			url,
			filter,
			orders,
			Group{
				Div(Class("w-full flex-[auto_auto_auto] justify-between mb-3 mt-1"),
					Div(Class("w-full max-w-sm min-w-[200px] relative"),
						Div(Class("relative"),
							TableSearch(
								Placeholder("Search Customer Name..."),
								BindSearch(elId, table.Order.PurchaserName.Name()),
								AutoFocus(),
							),
							TableSearch(
								Placeholder("Search Customer Email..."),
								BindSearch(elId, table.Order.PurchaserEmail.Name()),
								AutoFocus(),
							),
							TableSearch(
								Placeholder("Price Min"),
								BindLeftBetween(elId, table.Order.Price.Name()),
							),
							TableSearch(
								Placeholder("Price Max"),
								BindRightBetween(elId, table.Order.Price.Name()),
							),
						),
					),
				),
			},
			func(order model.Order) Node {
				return Tr(Class("hover:bg-neutral-50 border-b border-neutral-200"),
					Td(Class("p-4 py-5"),
						P(Class("block font-semibold text-sm text-neutral-800"), ToText(order.ID)),
					),
					Td(Class("p-4 py-5"),
						P(Class("block text-sm text-neutral-800"), ToText(order.ProductID)),
					),
					Td(Class("p-4 py-5"),
						P(Class("block text-sm text-neutral-800"), ToText(order.PurchaserName)),
					),
					Td(Class("p-4 py-5"),
						P(Class("block text-sm text-neutral-800"), ToText(order.PurchaserEmail)),
					),
					Td(Class("p-4 py-5"),
						P(Class("block font-semibold text-sm text-neutral-800"), Text("$"), FormatMoney(int64(order.Price))),
					),
				)
			},
			cols,
		)
	}().Render(w)
}
